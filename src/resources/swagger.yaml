openapi: 3.0.0
info:
  title: DACO API
  version: 1.0.0
security:
  - bearerAuth: []

servers:
  - url: /

paths:
  /health:
    get:
      tags:
        - Health
      summary: get status of app and various app components
      responses:
        '500':
          description: 'app is not fully healthy'
        '200':
          description: 'all components reporting healthy status'
          content:
            application/json:
              schema:
                type: object

  # TODO change this to upload a file.
  /admin/pdf-template/update:
    post:
      tags:
        - Admin
      summary: Update the pdf template by uploading it. 
      responses:
        '201':
          description: uploaded successfully
  
  /lookups/countries:
    get:
      tags:
        - Lookups
      summary: List of countries
      responses:
        '200':
          description: List of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /applications/:
    post:
      tags:
        - Application
      summary: Create a new application
      responses:
        '201':
          description: application created and returned in the response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

    get:
      parameters:
        - name: query
          required: false
          in: query
          schema: 
            type: string
        - name: states
          required: false
          in: query
          schema: 
            type: string
            format: csv
          example: 'DRAFT, REVIEW'
          description: see states enum in Application
        - name: page
          required: false
          in: query
          schema: 
            type: number
            default: 0
        - name: pageSize
          required: false
          in: query
          schema: 
            type: number
            default: 25
        - name: includeStats
          required: false
          in: query
          schema: 
            type: boolean
            default: false
        - name: sort
          required: false
          in: query
          schema: 
            type: string
            format: csv
            default: 'state:desc'
          description: 
            can be any combination of these fields state, primaryAffiliation, displayName, googleEmail, ethicsRequired, lastUpdatedAtUtc, appId, expiresAtUtc (order matters)
          example: "state:asc, primaryAffiliation:asc, displayName:asc, googleEmail:asc, lastUpdatedAtUtc:asc, appId:asc, expiresAtUtc:asc"
      tags:
        - Application
      summary: Search applications
      responses:
        '200':
          description: search applications by query & state
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats: 
                    type: object
                    properties:
                      countByState: 
                        type: object
                        properties:
                          "REVISIONS REQUESTED":
                            type: number
                          APPROVED:
                            type: number
                  pagingInfo:
                    type: object
                    properties:
                      totalCount:  
                        type: number
                      pagesCount:
                        type: number
                      index:
                        type: number
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationSummary'

  /applications/{id}/assets/{objectId}/url:
    parameters:
      - name: id
        required: true
        in: path
        schema: 
          type: string
      - name: objectId
        required: true
        in: path
        schema: 
          type: string
    get:
      tags:
        - Application
      summary: get a presigned url to download a document related to this application 
      responses:
        '200':
          description: application found and returned in the response body
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: 
                    type: string
                  ttl:
                    type: number

  /applications/{id}/assets/APP_PACKAGE:
    parameters:
      - name: type
        required: true
        in: path
        schema: 
          type: string
          enum: [ 'APP_PACKAGE' ]
      - name: id
        required: true
        in: path
        schema: 
          type: string
    get:
      tags:
        - Application
      summary: Download application package
      responses:
        '200':
          description: zip archive includes uploaded signed pdf and any ethics letters associated with the application
          content:
            application/zip:
              schema:
                type: string
                format: binary
                

  /applications/{id}/assets/{type}/assetId/{assetId}:
    parameters:
      - name: type
        required: true
        in: path
        schema: 
          type: string
          enum: [ 'ETHICS', 'SIGNED_APP' ]
      - name: id
        required: true
        in: path
        schema: 
          type: string
      - name: assetId
        required: true
        in: path
        schema: 
          type: string
    delete:
      tags:
        - Application
      summary: Delete a document by type and Id
      responses:
        '200':
          description: document deleted and the updated application returned in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /applications/{id}/assets/{type}/upload:
    parameters:
      - name: type
        required: true
        in: path
        schema: 
          type: string
          enum: [ 'ETHICS', 'SIGNED_APP' ]
      - name: id
        required: true
        in: path
        schema: 
          type: string
    post:
      tags:
        - Application
      summary: Create a presigned url to upload a document rted to this application 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary

      responses:
        '200':
          description: document uploaded and returned in the response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /applications/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema: 
          type: string
    get:
      tags:
        - Application
      summary: Get application by application ID
      responses:
        '200':
          description: application found and returned in the response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
    patch:
      tags:
        - Application
      summary: Update an application section
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'

      responses:
        '500':
          description: Unexpected error ocurred
        '200':
          description: Application updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
   
    delete:
      tags:
        - Admin
      summary: Remove application (only available in development environments).
      responses:
        '500':
          description: Unexpected error ocurred
        '204':
          description: deleted successfully

  /applications/{id}/collaborators/:
    parameters:
      - name: id
        required: true
        in: path
        schema: 
          type: string
    post:
      tags:
        - Application
      summary: Create a collaborator 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collaborator'

      responses:
        '409':
          $ref: '#/components/responses/ConflictError'
        '201':
          description: Collaborator was created successfully 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'

  /applications/{id}/collaborators/{collaboratorId}:
    parameters:
      - name: id
        required: true
        in: path
        schema: 
          type: string
      - name: collaboratorId
        required: true
        in: path
        schema:
          type: string
    
    delete:
      tags:
        - Application
      summary: Delete single collaborator by id 
      responses:
        '204':
          description: Deleted 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'

    put:
      tags:
        - Application
      summary: Update single collaborator by id 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collaborator'

      responses:
        '409':
          $ref: '#/components/responses/ConflictError'
        '200':
          description: Collaborator updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'

  /export/approved-users/:
    parameters:
      - name: format
        required: true
        in: query
        schema:
          type: string
          enum: [ 'daco-file-format' ]

    get:
      tags:
        - Admin
      summary: Download a csv of all approved users
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
              example: USER NAME,OPENID,EMAIL,CSA,CHANGED,AFFILIATION
                       Bob Example,bob@example.com,bob@some_gmail_domain.com,true,2021-07-23T16:49,A Research Centre

        '400':
          description: 'Unrecognized or missing file format for export'

  /jobs/export-and-email/:
    get:
      tags:
        - Admin
      summary: Trigger encrypted email of approved users to dcc mailing list
      responses:
        '200':
          description: OK

tags:
  - name: Health
    description: Service status monitoring
  - name: Application
    description: Application CRUD enpoints
  - name: Lookups
    description: Lookup endpoints for data references
  - name: Admin
    description: Admin operations collected for convenience
components:
  responses:
    ServiceUnavailableError:
      description: Endpoint service unavailable
    UnauthorizedError:
      description: Access token is missing or invalid
    ServerError:
      description: Server error
    ForbiddenError:
      description: Access token has incorrect scopes
    NotFoundError:
      description: Requested resource was not found
    ConflictError:
      description: a Conflict while adding the collaborator
      content: 
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [COLLABORATOR_EXISTS, COLLABORATOR_SAME_AS_APPLICANT]
              error:
                type: string
              message:
                type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Meta:
      readOnly: true
      type: object
      properties:
        status:
          type: string
          enum: [ 'PRISTINE' , 'COMPLETE' , 'INCOMPLETE' , 'REVISIONS REQUESTED' , 'LOCKED' , 'DISABLED', 'REVISIONS REQUESTED DISABLED', 'REVISIONS MADE']
        errors: 
          type: array
          items:
            type: object
            properties:
              field: 
                type: string
              message:
                type: string

    PersonalInfo:
      type: object
      properties:
        positionTitle:
          type: string
        website:
          type: string
        primaryAffiliation:
          type: string
        institutionEmail:
          type: string
        suffix:
          type: string
        googleEmail:
          type: string
        lastName:
          type: string
        displayName: 
          type: string
        middleName:
          type: string
        firstName:
          type: string
        title:
          type: string

    Collaborator:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        id:
          readOnly: true
          type: string
        info:
          $ref: '#/components/schemas/PersonalInfo'
        type: 
          type: string
          enum:
          - "student"
          - "personnel"

    RevisionRequest:
      type: object
      properties:
        details: 
          type: string
        requested:
          type: boolean

    AgreementItem:
      type: object
      properties:
        name: 
          type: string
        accepted:
          type: boolean

    Address:
      type: object
      properties:
        building:
          type: string
        streetAddress:
          type: string
        cityAndProvince:
          type: string
        postalCode:
          type: string
        country:
          type: string

    ApplicationSummary:
      type: object
      properties:
        appId:
          readOnly: true
          type: string
        state:
          type: string
          enum:
            - DRAFT
            - SIGN AND SUBMIT
            - REVIEW
            - REVISIONS REQUESTED
            - REJECTED
            - APPROVED
            - RENEWING
            - CLOSED
            - EXPIRED
        applicant:
          type: object
          properties:
            info: 
              $ref: '#/components/schemas/PersonalInfo'
        submitterId:
          readOnly: true
          type: string
        createdAtUtc:
          readOnly: true
          type: string
          format: data-time
        lastUpdatedAtUtc:
          readOnly: true
          type: string
          format: data-time
        submittedAtUtc:
          readOnly: true
          type: string
          format: data-time
        approvedAtUtc:
          readOnly: true
          type: string
          format: data-time
        ethics: 
          type: object
          properties:
            declaredAsRequired:
              type: boolean
        approvedBy:
          readOnly: true
          type: string 
        expiresAtUtc:
          type: string
          format: data-time
        closedAtUtc:
          readOnly: true
          type: string
          format: data-time
        closedBy:
          readOnly: true
          type: string

    Application:
      type: object
      properties:
        appId:
          readOnly: true
          type: string
        state:
          type: string
          enum:
            - DRAFT
            - SIGN AND SUBMIT
            - REVIEW
            - REVISIONS REQUESTED
            - REJECTED
            - APPROVED
            - RENEWING
            - CLOSED
            - EXPIRED
        submitterId:
          readOnly: true
          type: string
        createdAtUtc:
          readOnly: true
          type: string
          format: data-time
        lastUpdatedAtUtc:
          readOnly: true
          type: string
          format: data-time
        submittedAtUtc:
          readOnly: true
          type: string
          format: data-time
        approvedAtUtc:
          readOnly: true
          type: string
          format: data-time
        approvedBy:
          readOnly: true
          type: string 
        expiresAtUtc:
          type: string
          format: data-time
        closedAtUtc:
          readOnly: true
          type: string
          format: data-time
        closedBy:
          readOnly: true
          type: string
        denialReason:
          type: string
        revisionsRequested:
          type: boolean
          readOnly: true
        revisionRequests:
          type: object
          properties:
            applicant: 
              $ref: '#/components/schemas/RevisionRequest'
            representative:
              $ref: '#/components/schemas/RevisionRequest'
            projectInfo:
              $ref: '#/components/schemas/RevisionRequest'
            collaborators: 
              $ref: '#/components/schemas/RevisionRequest'
            ethicsLetter: 
              $ref: '#/components/schemas/RevisionRequest'
            signature: 
              $ref: '#/components/schemas/RevisionRequest'
            general: 
              $ref: '#/components/schemas/RevisionRequest'

        sections:
          type: object
          properties:
            terms:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'
                agreement:
                  $ref: '#/components/schemas/AgreementItem'

            applicant:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'
                info: 
                  $ref: '#/components/schemas/PersonalInfo'
                address:
                  $ref: '#/components/schemas/Address'

            representative:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'            
                info: 
                  $ref: '#/components/schemas/PersonalInfo'
                address:
                  $ref: '#/components/schemas/Address'
                addressSameAsApplicant:
                  type: boolean

            collaborators:
              type: object
              properties:
                list:
                  type: array
                  items:
                    $ref: '#/components/schemas/Collaborator'

            projectInfo:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'
                background:
                  type: string
                summary:
                  type: string
                methodology: 
                  type: string
                aims:
                  type: string
                title:
                  type: string
                website:
                  type: string
                publicationsURLs:
                  type: array
                  items:
                    type: string

            ethicsLetter: 
              type: object
              properties:
                meta: 
                  $ref: '#/components/schemas/Meta'
                declaredAsRequired:
                  type: boolean
                approvalLetterDocs:
                  type: array
                  items:
                    type: object
                    properties:
                      name: 
                        type: string
                      objectId: 
                        type: string
                      uploadedAtUtc:
                        type: string
                        format: data-time
                  
            ITAgreements:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'
                agreements: 
                  type: array
                  items:
                    $ref: '#/components/schemas/AgreementItem'  

            dataAccessAgreements:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'
                agreements: 
                  type: array
                  items:
                    $ref: '#/components/schemas/AgreementItem'

            appendices:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/Meta'
                agreements: 
                  type: array
                  items:
                    $ref: '#/components/schemas/AgreementItem'  

            signature:
              type: object
              properties:
                signedAppDocObjId: 
                  type: string
                signedDocName: 
                  type: string
                uploadedAtUtc: 
                  type: string
                  format: date
                meta:
                  $ref: '#/components/schemas/Meta'